#define VOLUME        A0

#define MILLISECONDS  1000
#define MICROSECONDS  1000000

#define BUFFER_SIZE   65

const bool isMicrosecond  = true;
const float updatingFrequency = 1;
const float samplingFrequency = 100;
const float bandwidth = 1.0;
const PROGMEM float sinc_01[BUFFER_SIZE] = {0.026462134, 0.026710391, 0.026843384, 0.026858248, 0.026752764, 0.026525378, 0.026175216, 0.025702102, 0.025106564, 0.024389835, 0.023553854, 0.022601262, 0.021535387, 0.020360243, 0.019080488, 0.017701421, 0.016228944, 0.014669538, 0.013030212, 0.011318488, 0.00954233, 0.0077101234, 0.0058306037, 0.003912835, 0.0019661312, -1.3723378E-9, -0.0019758935, -0.0039518066, -0.0059179454, -0.00786457, -0.009782014, -0.011660749, -0.013491463, -0.015265098, -0.016972903, -0.018606486, -0.020157903, -0.02161962, -0.022984654, -0.024246551, -0.025399435, -0.026438069, -0.02735784, -0.028154837, -0.02882582, -0.029368274, -0.029780405, -0.030061146, -0.030210184, -0.030227907, -0.03011546, -0.02987468, -0.029508118, -0.029018996, -0.028411191, -0.027689213, -0.02685816, -0.025923686, -0.024891965, -0.023769656, -0.022563826, -0.021281969, -0.019931866, -0.018521605, -0.017059501};
const PROGMEM float sinc_02[BUFFER_SIZE] = {0.029293701, 0.029393367, 0.029010931, 0.02814279, 0.026793981, 0.024978265, 0.02271799, 0.020043837, 0.016994365, 0.013615436, 0.009959466, 0.0060845437, 0.0020534643, -0.0020673915, -0.0062092156, -0.010301998, -0.014275782, -0.01806198, -0.02159459, -0.024811434, -0.02765535, -0.030075204, -0.032026935, -0.03347434, -0.034389812, -0.03475488, -0.034560584, -0.033807684, -0.032506682, -0.030677667, -0.028349971, -0.0255617, -0.022358986, -0.018795248, -0.014930186, -0.010828732, -0.006559815, -0.0021952714, 0.0021916581, 0.006527482, 0.010739853, 0.014758854, 0.018518224, 0.021956613, 0.02501851, 0.027655346, 0.02982629, 0.03149887, 0.03264959, 0.03326421, 0.03333795, 0.032875497, 0.03189084, 0.030406877, 0.028454958, 0.026074214, 0.023310732, 0.020216636, 0.016849102, 0.013269235, 0.009540828, 0.0057293694, 0.0019005551, -0.0018807079, -0.005551555};
const PROGMEM float sinc_03[BUFFER_SIZE] = {0.02938126, 0.029189194, 0.027931837, 0.025632793, 0.02235559, 0.018202016, 0.013308889, 0.007843441, 0.0019974257, -0.00401985, -0.0099892365, -0.015690006, -0.020908257, -0.025445161, -0.02912479, -0.031801045, -0.033363633, -0.03374265, -0.03291164, -0.030889068, -0.027738009, -0.023564164, -0.01851218, -0.012760458, -0.0065146415, 4.156866E-10, 0.0065469765, 0.012887528, 0.018789483, 0.024036193, 0.028434725, 0.031823117, 0.034076653, 0.035112534, 0.034893055, 0.03342702, 0.030769356, 0.027019067, 0.022315318, 0.016832191, 0.010771943, 0.0043574357, -0.0021765297, -0.008591952, -0.014656584, -0.020152833, -0.02488559, -0.028689548, -0.03143515, -0.033033147, -0.033437595, -0.03264714, -0.03070463, -0.027694961, -0.023741426, -0.019000646, -0.013656121, -0.007911075, -0.0019803632, 0.0039176233, 0.009569389, 0.014774142, 0.019351432, 0.023147339, 0.026039928};
const PROGMEM float sinc_04[BUFFER_SIZE] = {0.02806427, 0.027491843, 0.025145505, 0.021138633, 0.015695857, 0.009140426, 0.0018747117, -0.005644926, -0.01293733, -0.01952788, -0.024979912, -0.028924113, -0.031083837, -0.03129467, -0.02951675, -0.02583901, -0.02047496, -0.01375006, -0.006081648, 0.0020474668, 0.010120071, 0.017617987, 0.024056105, 0.029014215, 0.032165058, 0.03329625, 0.032324787, 0.029303132, 0.024416443, 0.01797091, 0.010374234, 0.002109368, -0.006296954, -0.014308309, -0.021413576, -0.02716015, -0.03118347, -0.03323039, -0.03317568, -0.031029675, -0.026937222, -0.021167794, -0.014097418, -0.0061835977, 0.0020645757, 0.010120061, 0.0174722, 0.023659458, 0.028299352, 0.031112274, 0.031938784, 0.030748706, 0.027641699, 0.022839243, 0.016668838, 0.009541451, 0.0019236258, -0.0056935954, -0.012826751, -0.019031309, -0.02392997, -0.027235746, -0.028769344, -0.0284686, -0.026390363};
const PROGMEM float sinc_05[BUFFER_SIZE] = {0.028423049, 0.027339477, 0.023511417, 0.0172625, 0.009167689, -1.3094703E-9, -0.009344152, -0.017933607, -0.02489629, -0.029508686, -0.031271603, -0.029964337, -0.025671264, -0.018777767, -0.009935478, 1.5810032E-8, 0.010052967, 0.019224545, 0.026593203, 0.031408396, 0.033167895, 0.03167052, 0.027039008, 0.019710148, 0.0103931315, -1.13901235E-8, -0.010444764, -0.019906456, -0.02744406, -0.032304943, -0.034000985, -0.03235815, -0.027534539, -0.020005006, -0.010513783, 2.2563313E-8, 0.010496537, 0.019939292, 0.027398868, 0.032145634, 0.033721913, 0.031986784, 0.027128698, 0.019644974, 0.010290348, -1.1865694E-9, -0.010205241, -0.019321093, -0.026460316, -0.030939842, -0.032347094, -0.030578282, -0.02584537, -0.01865129, -0.009735968, 4.1131234E-8, 0.009587995, 0.018088205, 0.024683485, 0.02875834, 0.029957185, 0.028215231, 0.023759786, 0.017082034, 0.008883119};
const PROGMEM float sinc_06[BUFFER_SIZE] = {0.029082967, 0.027348308, 0.021676945, 0.012794921, 0.0019060731, -0.009472215, -0.019722138, -0.02735729, -0.031239703, -0.030750236, -0.025886647, -0.017273923, -0.006083929, 0.00612518, 0.017627858, 0.026776949, 0.03224161, 0.033202223, 0.029473852, 0.021539511, 0.010487405, -0.00213949, -0.014560806, -0.025011992, -0.031997122, -0.03450486, -0.032156024, -0.025261067, -0.014778918, -0.0021823626, 0.010750854, 0.022190845, 0.030517183, 0.034550168, 0.033719588, 0.02814604, 0.018623212, 0.0065040654, -0.0064933607, -0.018531373, -0.027915025, -0.033332605, -0.03404093, -0.029967958, -0.0217193, -0.010487435, 0.002121767, 0.0143207265, 0.024395742, 0.030949831, 0.03309812, 0.030588167, 0.023828842, 0.013824313, 0.0020242115, -0.009887844, -0.020236734, -0.027593127, -0.030972676, -0.029968329, -0.024798544, -0.0162656, -0.0056309197, 0.00557206, 0.015760738};
const PROGMEM float sinc_07[BUFFER_SIZE] = {0.028537266, 0.026115067, 0.01859907, 0.0073330514, -0.0055814344, -0.017679159, -0.026604516, -0.030572627, -0.028727457, -0.021324968, -0.009702278, 0.0039646653, 0.017070882, 0.027081845, 0.032026578, 0.030887531, 0.023810146, 0.012088517, -0.0020723087, -0.015973741, -0.026941234, -0.032841966, -0.032502133, -0.02594137, -0.014377724, 2.2468045E-8, 0.014449133, 0.026199749, 0.032989006, 0.033499844, 0.027617881, 0.016456729, 0.002145603, -0.012579344, -0.02490167, -0.03246681, -0.033834998, -0.028756969, -0.018219665, -0.004253234, 0.010462566, 0.023115866, 0.031303417, 0.033490147, 0.029298583, 0.019573929, 0.0062130047, -0.00820756, -0.020931862, -0.029554201, -0.03247708, -0.02920881, -0.0204454, -0.007922999, 0.005927492, 0.018454906, 0.027298696, 0.0308362, 0.028481903, 0.020782705, 0.009294391, -0.0037332776, -0.01579982, -0.024636244, -0.028634366};
const PROGMEM float sinc_08[BUFFER_SIZE] = {0.028277222, 0.02506144, 0.015492148, 0.0018346153, -0.012566902, -0.02411153, -0.029845955, -0.02822237, -0.019515123, -0.0057840883, 0.009613881, 0.022849329, 0.030576842, 0.030784238, 0.02331749, 0.009944497, -0.0060646394, -0.020741113, -0.030405883, -0.03259623, -0.026695713, -0.014105873, 0.0020878445, 0.017875683, 0.029321527, 0.0335489, 0.029467134, 0.018053645, 0.0021190958, -0.014388431, -0.027366273, -0.03358191, -0.031482175, -0.021583118, -0.006342594, 0.010452961, 0.024634186, 0.032688387, 0.03263457, 0.024512656, 0.0103671625, -0.0062698685, -0.021265006, -0.030915625, -0.032868262, -0.026695725, -0.013989056, 0.0020534, 0.01743524, 0.028361814, 0.032181136, 0.028030371, 0.01703007, 0.0019822293, -0.013345975, -0.025169488, -0.030624673, -0.028465679, -0.019348312, -0.0056370613, 0.009209862, 0.021515572, 0.028300107, 0.028004253, 0.020847697};
const PROGMEM float sinc_09[BUFFER_SIZE] = {0.028802069, 0.024595069, 0.01253888, -0.0037299597, -0.019162802, -0.028870905, -0.029678876, -0.021164363, -0.0058432757, 0.011574214, 0.02563662, 0.031863507, 0.028177263, 0.01559566, -0.0020457532, -0.019266699, -0.030650903, -0.032555833, -0.02428145, -0.008322451, 0.010386114, 0.026000522, 0.033600688, 0.030746097, 0.01826173, -1.2224765E-9, -0.018352387, -0.031052288, -0.034104005, -0.02652138, -0.010646952, 0.008574083, 0.025140967, 0.033877533, 0.03205597, 0.02025177, 0.002161251, -0.01656034, -0.030073494, -0.034183055, -0.027645405, -0.012546201, 0.0063672387, 0.023184072, 0.032684278, 0.0319652, 0.021331448, 0.004174786, -0.014111541, -0.027834015, -0.032778442, -0.027508758, -0.0137836505, 0.00403, 0.020350743, 0.030137667, 0.030453239, 0.021346876, 0.005793386, -0.011279854, -0.0245591, -0.030003563, -0.026079204, -0.014187303, 0.0018290575};
const PROGMEM float sinc_10[BUFFER_SIZE] = {0.02877595, 0.0235451, 0.009092065, -0.009188115, -0.024299327, -0.030329138, -0.024767043, -0.009545304, 0.00962761, 0.025413256, 0.03165987, 0.025805658, 0.009927291, -0.0099946465, -0.026334422, -0.032748718, -0.026645772, -0.01023241, 0.01028384, 0.027049307, 0.03357971, 0.02727504, 0.01045619, -0.01049094, -0.027547434, -0.03414061, -0.027684202, -0.010595336, 0.010612894, 0.027821418, 0.034423146, 0.02786724, 0.010647825, -0.010647871, -0.027867267, -0.034423146, -0.02782139, -0.010612786, 0.010595381, 0.027684228, 0.034140605, 0.027547404, 0.0104908645, -0.010456265, -0.027275084, -0.03357971, -0.027049262, -0.010283797, 0.010232453, 0.026645798, 0.032748718, 0.026334377, 0.009994574, -0.009927247, -0.025805706, -0.03165987, -0.025413193, -0.009627627, 0.009545302, 0.024767041, 0.030329136, 0.024299253, 0.009188097, -0.00909209, -0.023545118};
const PROGMEM float sinc_11[BUFFER_SIZE] = {0.028349165, 0.022091925, 0.005431463, -0.0141117135, -0.027512226, -0.028416915, -0.016160373, 0.0038140516, 0.022374615, 0.030885547, 0.025233487, 0.007814927, -0.0134754805, -0.02883107, -0.031060847, -0.018963687, 0.002037418, 0.02233113, 0.03252703, 0.02781122, 0.010222772, -0.012226819, -0.029211868, -0.032853335, -0.021382663, 4.4238814E-8, 0.021488916, 0.03318052, 0.029649386, 0.012471722, -0.010479659, -0.02865223, -0.033678416, -0.023237614, -0.0021307264, 0.01993339, 0.032814775, 0.030614354, 0.014382288, -0.008383894, -0.027210718, -0.033479277, -0.024380904, -0.004177921, 0.017796919, 0.031462558, 0.03062577, 0.015794508, -0.006112767, -0.025001282, -0.03226301, -0.024709022, -0.005970546, 0.015246987, 0.029217774, 0.029663712, 0.016581912, -0.0038469408, -0.022183381, -0.030100195, -0.024172777, -0.007358607, 0.012472144, 0.026227498, 0.027770907};
const PROGMEM float sinc_12[BUFFER_SIZE] = {0.028562322, 0.021057922, 0.0018337409, -0.018812057, -0.029577559, -0.024354631, -0.0056938604, 0.016428439, 0.029952753, 0.027322624, 0.009710802, -0.013480481, -0.029647704, -0.029848807, -0.013756687, 0.010044807, 0.028647766, 0.031834424, 0.017699445, -0.006218546, -0.026964884, -0.03319966, -0.021408437, 0.0021158485, 0.024637459, 0.03388715, 0.024759848, 0.0021369152, -0.021729127, -0.033864707, -0.02764213, -0.0064065843, 0.018326001, 0.033126846, 0.029960988, 0.010558389, -0.01453354, -0.031695083, -0.031642903, -0.014461865, 0.010471732, 0.029617142, 0.032638587, 0.017996136, -0.0062703826, -0.026964847, -0.032924883, -0.021055453, 0.002063719, 0.023831058, 0.032505598, 0.023552576, 0.002015876, -0.020325417, -0.0314111, -0.025423195, -0.0058423583, 0.016570026, 0.029696722, 0.026627887, 0.00930255, -0.012693595, -0.027440144, -0.027153295, -0.012299593};
const PROGMEM float sinc_13[BUFFER_SIZE] = {0.028833734, 0.019962613, -0.0018511685, -0.022955954, -0.029858615, -0.017862812, 0.005747966, 0.026133066, 0.030237375, 0.015163461, -0.009803098, -0.028919727, -0.02992943, -0.011930288, 0.013887448, 0.031208437, 0.028919976, 0.008251333, -0.017867688, -0.03290851, -0.02722109, -0.0042339684, 0.021611838, 0.03395032, 0.024871573, -2.3517343E-8, -0.024995068, -0.034288406, -0.021935536, 0.004318764, 0.02790488, 0.033903617, 0.018500103, -0.008586399, -0.030245736, -0.032804094, -0.014671521, 0.012668245, 0.031943604, 0.031024981, 0.010571151, -0.016436953, -0.032948717, -0.028626867, -0.0063300454, 0.019777283, 0.033237744, 0.02569349, 0.0020833234, -0.022591535, -0.03281448, -0.022327477, 0.0020348737, 0.02480273, 0.031709567, 0.018646497, -0.0058980393, -0.026358357, -0.029978922, -0.014777888, 0.009391174, 0.02723163, 0.027700873, 0.0108528575, -0.012416543};
const PROGMEM float sinc_14[BUFFER_SIZE] = {0.02851569, 0.018383384, -0.0054633743, -0.025819888, -0.027673831, -0.009287442, 0.016255312, 0.030368546, 0.022506027, -0.0019545942, -0.025381729, -0.030616004, -0.013554608, 0.013646556, 0.031243319, 0.026254613, 0.0020493323, -0.023919927, -0.032718085, -0.01775319, 0.0102828955, 0.031062804, 0.029383432, 0.0063038412, -0.021508317, -0.033831827, -0.021615107, 0.0063667684, 0.029823624, 0.031685043, 0.0105410265, -0.0182901, -0.03387626, -0.024890944, 0.0021433984, 0.027597055, 0.03300748, 0.014490606, -0.014466872, -0.032844756, -0.027370464, -0.0021186012, 0.024524124, 0.033266574, 0.017901367, -0.010282877, -0.030805772, -0.028898936, -0.0061485446, 0.02080437, 0.032452527, 0.020561127, -0.006005704, -0.027897095, -0.029389312, -0.00969482, 0.016679553, 0.030630363, 0.02231363, -0.00190493, -0.024314975, -0.028828854, -0.012545264, 0.012414297, 0.027934082};
const PROGMEM float sinc_15[BUFFER_SIZE] = {0.028423052, 0.016896728, -0.008980562, -0.027931314, -0.024001328, 3.5723594E-10, 0.024463309, 0.029017184, 0.009509545, -0.018237386, -0.031271607, -0.018518973, 0.009805549, 0.030383073, 0.026011458, -3.20058E-8, -0.026318992, -0.031105952, -0.010157661, 0.01941145, 0.0331679, 0.0195735, -0.0103280125, -0.03189173, -0.027209599, 2.0106494E-9, 0.02734468, 0.032209292, 0.010482716, -0.019965546, -0.034000993, -0.019998427, 0.010517227, 0.032368816, 0.027525458, 6.201354E-8, -0.027480276, -0.032262422, -0.010465458, 0.019867087, 0.033721916, 0.019768914, -0.010362154, -0.031786285, -0.026940526, -5.9703034E-8, 0.026717627, 0.03126219, 0.01010696, -0.019121867, -0.032347098, -0.018898413, 0.009871972, 0.030178363, 0.025489159, -6.374786E-8, -0.025101563, -0.029267356, -0.009428273, 0.017773535, 0.02995719, 0.017437972, -0.009075459, -0.027639344, -0.023256386};
const PROGMEM float sinc_16[BUFFER_SIZE] = {0.028752986, 0.015581905, -0.012517514, -0.029475365, -0.019130139, 0.009364744, 0.0296283, 0.02249935, -0.005833329, -0.02918331, -0.025592929, 0.0020012876, 0.028129248, 0.028320046, 0.0020422703, -0.026473152, -0.030598663, -0.006199734, 0.024240116, 0.03235852, 0.010368402, -0.021472823, -0.033543423, -0.014443309, 0.018230613, 0.034113362, 0.018321157, -0.014587241, -0.03404589, -0.021902975, 0.010628937, 0.033337016, 0.025098091, -0.006451542, -0.032001376, -0.027826704, 0.0021577035, 0.030071763, 0.030022252, 0.0021469262, -0.02759831, -0.03163406, -0.006356446, 0.024646504, 0.03262855, 0.010368439, -0.021295216, -0.03299036, -0.014087488, 0.017633932, 0.032722585, 0.017427793, -0.013760074, -0.031846654, -0.020315966, 0.009775735, 0.030401338, 0.022693314, -0.0057834825, -0.0284412, -0.024517108, 0.0018845097, 0.026034784, 0.025762552, 0.0018258595};
const PROGMEM float sinc_17[BUFFER_SIZE] = {0.028680528, 0.013974148, -0.01571311, -0.029576287, -0.012746129, 0.017767912, 0.030271633, 0.011333393, -0.01979348, -0.030753773, -0.00975098, 0.021762997, 0.031012947, 0.008016783, -0.023650067, -0.03104259, -0.0061510843, 0.025429303, 0.030839516, 0.0041765724, -0.02707649, -0.030404024, -0.0021175342, 0.028569313, 0.02973971, -4.556745E-8, -0.029887402, -0.02885373, 0.0021493451, 0.03101308, 0.027756527, -0.0043029585, -0.031931233, -0.02646158, 0.006433211, 0.03262979, 0.024985397, -0.008512683, -0.033100035, -0.023347193, 0.010515112, 0.033336464, 0.021568345, -0.012415044, -0.03333707, -0.01967219, 0.014188774, 0.03310332, 0.017683852, -0.015814483, -0.032640122, -0.015629532, 0.017272934, 0.0319557, 0.013536153, -0.01854762, -0.031061456, -0.0114310505, 0.019624336, 0.029971784, 0.009341046, -0.020492777, -0.0287037, -0.007292805, 0.021145172};
const PROGMEM float sinc_18[BUFFER_SIZE] = {0.02840905, 0.012233606, -0.018515509, -0.028432038, -0.005556355, 0.024223937, 0.026484983, -0.0019148212, -0.028598387, -0.022606757, 0.009658692, 0.03124254, 0.016994184, -0.017109424, -0.03188268, -0.009990843, 0.023703173, 0.030394979, 0.0020629487, -0.028925536, -0.026820181, 0.0062367963, 0.03235611, 0.021364141, -0.014313128, -0.033705305, -0.014384259, 0.021576945, 0.032840785, 0.006361789, -0.027493875, -0.029800242, 0.0021359778, 0.031628955, 0.024789747, -0.010501736, -0.03368299, -0.018167693, 0.01813779, 0.033516884, 0.010415532, -0.02450525, -0.031162772, -0.0020975305, 0.029166972, 0.026820216, -0.0061852406, -0.031822603, -0.020837812, 0.013844652, 0.032331165, 0.013682861, -0.020353468, -0.03071941, -0.0059007355, 0.025286842, 0.027176023, -0.0019312019, -0.028353902, -0.02203199, 0.009252856, 0.029418856, 0.015728844, -0.015564338, -0.028505709};
const PROGMEM float sinc_19[BUFFER_SIZE] = {0.028605822, 0.010650314, -0.021321306, -0.026744492, 0.0018748032, 0.02867419, 0.019398568, -0.0147930635, -0.030727174, -0.007765769, 0.025461946, 0.026772762, -0.005984116, -0.031582583, -0.017338615, 0.01913545, 0.03171264, 0.004125581, -0.028990323, -0.025609639, 0.010315359, 0.033448365, 0.014321894, -0.023102522, -0.031472165, 2.4140883E-8, 0.031628445, 0.0233325, -0.014536532, -0.0341184, -0.010574344, 0.026384035, 0.0300165, -0.004293119, -0.03316639, -0.020113744, 0.01831776, 0.0335361, 0.006386845, -0.028721726, -0.027457025, 0.008417977, 0.03348245, 0.016204685, -0.021363001, -0.0317474, -0.0020868662, 0.029933827, 0.023995494, -0.012052893, -0.032555103, -0.011911964, 0.023437833, 0.0288961, -0.0019911292, -0.02993231, -0.019904599, 0.01492061, 0.030464543, 0.00756826, -0.024391832, -0.025209932, 0.005538526, 0.028730541, 0.01550214};
const PROGMEM float sinc_20[BUFFER_SIZE] = {0.028768819, 0.008991198, -0.02379744, -0.024048831, 0.00927922, 0.03032162, 0.009457818, -0.024983779, -0.025199149, 0.009704615, 0.031652026, 0.009854417, -0.02598357, -0.026159784, 0.010056401, 0.0327406, 0.010175241, -0.026782222, -0.026916673, 0.010329361, 0.033571385, 0.010415521, -0.027367985, -0.02745869, 0.0105196, 0.034132145, 0.010571749, -0.027732223, -0.027777847, 0.010624189, 0.034414615, 0.010641682, -0.027869528, -0.027869474, 0.010641772, 0.034414615, 0.0106240995, -0.02777798, -0.027732167, 0.010571839, 0.034132145, 0.01051951, -0.027458785, -0.02736789, 0.01041567, 0.033571385, 0.010329213, -0.026916727, -0.026782168, 0.010175327, 0.032740604, 0.010056255, -0.026159873, -0.025983626, 0.009854586, 0.031652026, 0.0097044185, -0.025199132, -0.02498378, 0.0094578145, 0.030321619, 0.009278978, -0.024048854, -0.02379741, 0.00899126};
const PROGMEM float sinc_21[BUFFER_SIZE] = {0.02850003, 0.0071683056, -0.025535947, -0.020158716, 0.015939577, 0.02856814, -0.0019038327, -0.030051218, -0.0131381955, 0.023971688, 0.025367765, -0.011629715, -0.031566482, -0.004014782, 0.029975085, 0.019064577, -0.020792909, -0.029674074, 0.0061761583, 0.033048846, 0.010277164, -0.028192606, -0.024429567, 0.016198449, 0.032664478, -6.731618E-8, -0.032826714, -0.01635958, 0.024795646, 0.028757317, -0.010535491, -0.0340482, -0.0063946494, 0.03087884, 0.021745972, -0.020039504, -0.0316676, 0.0042633135, 0.033690814, 0.012476218, -0.027355537, -0.025984718, 0.014316402, 0.032918956, 0.0020964572, -0.03162999, -0.017743312, 0.022562746, 0.028738713, -0.008112539, -0.032434702, -0.008017491, 0.028070966, 0.021780448, -0.016927842, -0.029821584, 0.0019537183, 0.030310316, 0.013025891, -0.023362217, -0.024301348, 0.010950997, 0.02921604, 0.0036520567, -0.026800182};
const PROGMEM float sinc_22[BUFFER_SIZE] = {0.028474651, 0.0053963196, -0.027069954, -0.015765108, 0.021665778, 0.024279866, -0.012898234, -0.029605567, 0.0019358136, 0.030838497, 0.009680974, -0.02765939, -0.020263072, 0.020400574, 0.028226059, -0.010014034, -0.032334138, -0.0020573381, 0.031896114, 0.014086745, -0.026882138, -0.024318978, 0.01794103, 0.031234693, -0.0063136867, -0.033783138, -0.006344865, 0.031545825, 0.018209571, -0.024806166, -0.027557205, 0.014512815, 0.033025134, -0.0021411707, -0.033816386, -0.010525813, 0.029820004, 0.021662258, -0.0216268, -0.029672818, 0.010439674, 0.033428255, 0.0021093471, -0.032430857, -0.014204171, 0.026882153, 0.024117554, -0.017645234, -0.030465115, 0.00610712, 0.03240582, 0.006035422, -0.02975725, -0.01703344, 0.023009012, 0.025345039, -0.013234993, -0.0298608, 0.0019193114, 0.030054344, 0.009273775, -0.026044987, -0.01875421, 0.018558374, 0.025236342};
const PROGMEM float sinc_23[BUFFER_SIZE] = {0.02874791, 0.0036440617, -0.028470408, -0.010934919, 0.026294764, 0.017809646, -0.022294711, -0.023777407, 0.016677732, 0.028395178, -0.00977391, -0.03130203, 0.0020151874, 0.032248028, 0.006093508, -0.031115543, -0.014009802, 0.02793085, 0.021192214, -0.02286537, -0.027140077, 0.0162259, 0.031430222, -0.008434558, -0.033749077, -1.856663E-8, 0.03391665, 0.008518588, -0.031901043, -0.016551025, 0.02782182, 0.023556823, -0.021942401, -0.02906477, 0.014652051, 0.032706477, -0.0064376798, -0.034242723, -0.0021508406, 0.033580676, 0.010539726, -0.030779744, -0.018173262, 0.026046442, 0.024552383, -0.019718418, -0.029270625, 0.012238954, 0.032041293, -0.004124021, -0.032716807, -0.0040759007, 0.031296596, 0.011814722, -0.027924819, -0.018591123, 0.022876466, 0.023982417, -0.016535074, -0.027673252, 0.009363224, 0.029474845, -0.0018651048, -0.02933586, -0.0054481225};
const PROGMEM float sinc_24[BUFFER_SIZE] = {0.028637897, 0.0018186463, -0.029050494, -0.0055447486, 0.028952423, 0.00932725, -0.028327385, -0.013088909, 0.027170874, 0.01675089, -0.0254905, -0.020234743, 0.02330606, 0.023464179, -0.020649344, -0.02636713, 0.017563326, 0.028877769, -0.014101627, -0.030937731, 0.010326945, 0.03249798, -0.006309951, -0.03351999, 0.002127773, 0.033976816, 0.0021384624, -0.03385379, -0.0064044637, 0.033148956, 0.0105862, -0.031873252, -0.014600734, 0.03005018, 0.018368388, -0.027715273, -0.021815237, 0.024915505, 0.024874482, -0.02170766, -0.027487785, 0.018157588, 0.029607266, -0.014338095, -0.031195972, 0.010326827, 0.032229017, -0.0062059155, -0.03269412, 0.0020581323, 0.032591604, 0.00203407, -0.031934302, -0.005990998, 0.030747231, 0.009736405, -0.02906653, -0.013201851, 0.02693859, 0.01632502, -0.024419181, -0.01905359, 0.0215707, 0.021345202, -0.018462194};
const PROGMEM float sinc_25[BUFFER_SIZE] = {0.028423047, -1.2565462E-9, -0.029061709, 3.5021844E-10, 0.029667266, -1.0118526E-8, -0.030238306, 2.0246976E-8, 0.030773502, -3.0699894E-8, -0.0312716, -1.8653607E-8, 0.03173143, 3.8971447E-8, -0.032151915, 6.3625855E-8, 0.03253207, -4.3798906E-8, -0.032870993, 2.3490733E-8, 0.03316789, 6.0735665E-8, -0.03342206, -1.8253944E-8, 0.0336329, -2.4790896E-8, -0.033799913, 6.8230634E-8, 0.033922702, 1.7680351E-8, -0.034000985, 2.5823963E-8, 0.034034565, -6.938022E-8, -0.03402337, -1.6886903E-8, 0.033967424, -2.6556604E-8, -0.033866856, -5.9228437E-8, 0.03372191, 1.5901955E-8, -0.03353293, 2.696178E-8, 0.033300355, -6.9195586E-8, -0.03302474, 1.10635135E-7, 0.032706738, -1.5111969E-7, -0.032347094, -5.4806982E-8, 0.031946655, 1.3489347E-8, -0.031506363, 2.6718633E-8, 0.031027263, -6.566823E-8, -0.030510465, -1.2748342E-7, 0.029957183, -1.3922708E-7, -0.029368713, -4.8153105E-8, 0.028746424};
const PROGMEM float sinc_26[BUFFER_SIZE] = {0.028637907, -0.0018186495, -0.029050501, 0.0055447514, 0.028952433, -0.009327272, -0.028327394, 0.013088949, 0.02717087, -0.016750949, -0.025490485, 0.020234723, 0.023306066, -0.023464132, -0.020649284, 0.026367214, 0.017563295, -0.02887782, -0.014101514, 0.030937755, 0.010326861, -0.032497976, -0.0063100313, 0.03352, 0.0021277673, -0.033976827, 0.002138297, 0.033853788, -0.0064046443, -0.033148974, 0.01058646, 0.031873245, -0.0146008255, -0.030050123, 0.01836855, 0.027715303, -0.02181545, -0.024915477, 0.024874555, 0.021707762, -0.027487904, -0.018157514, 0.02960722, 0.014337819, -0.031195922, -0.01032694, 0.03222901, 0.0062059467, -0.03269413, -0.002058079, 0.032591615, -0.0020342069, -0.03193435, 0.0059907334, 0.030747177, -0.009736688, -0.029066416, 0.013201762, 0.026938628, -0.016325004, -0.024418911, 0.019053634, 0.021570643, -0.021345295, -0.018462079};
const PROGMEM float sinc_27[BUFFER_SIZE] = {0.028747942, -0.0036440683, -0.028470438, 0.010934931, 0.026294788, -0.017809682, -0.022294736, 0.023777457, 0.016677732, -0.028395237, -0.00977388, 0.031302065, 0.0020151867, -0.03224807, 0.0060936, 0.031115538, -0.014009858, -0.027930833, 0.021192338, 0.022865364, -0.02714016, -0.01622597, 0.031430256, 0.008434478, -0.033749115, 6.87152E-8, 0.033916704, -0.008518731, -0.031901013, 0.016551012, 0.027821692, -0.023556886, -0.021942351, 0.029064877, 0.0146519, -0.032706503, -0.0064374194, 0.034242764, -0.0021509402, -0.033580735, 0.010539912, 0.03077979, -0.018173184, -0.026046438, 0.024552392, 0.019718328, -0.029270746, -0.01223876, 0.032041334, 0.004123723, -0.032716844, 0.0040757954, 0.031296708, -0.01181471, -0.027924728, 0.018591186, 0.022876263, -0.02398253, -0.016535148, 0.02767317, 0.009362781, -0.02947493, -0.0018650168, 0.0293359, -0.005448288};
const PROGMEM float sinc_28[BUFFER_SIZE] = {0.02847464, -0.0053963237, -0.027069937, 0.015765114, 0.021665752, -0.024279878, -0.012898202, 0.029605573, 0.0019357621, -0.030838475, 0.0096810395, 0.027659353, -0.020263111, -0.020400532, 0.028226119, 0.010013849, -0.032334138, 0.0020574874, 0.031896055, -0.014086839, -0.02688204, 0.024318973, 0.01794093, -0.031234784, -0.0063135517, 0.033783123, -0.0063449536, -0.031545714, 0.018209826, 0.024806093, -0.027557429, -0.014512646, 0.03302518, 0.0021407714, -0.033816338, 0.010526025, 0.0298198, -0.021662489, -0.02162662, 0.029672936, 0.010439372, -0.03342829, 0.0021093576, 0.03243074, -0.014204368, -0.026882062, 0.024117928, 0.017645042, -0.0304652, -0.0061068195, 0.03240581, -0.0060357945, -0.029757174, 0.017033407, 0.023008665, -0.025345342, -0.013234476, 0.02986082, 0.0019191414, -0.030054308, 0.009274438, 0.026044736, -0.018754445, -0.0185581, 0.025236515};
const PROGMEM float sinc_29[BUFFER_SIZE] = {0.028500032, -0.0071683056, -0.025535949, 0.02015872, 0.015939582, -0.028568145, -0.001903831, 0.030051218, -0.013138189, -0.02397165, 0.025367776, 0.011629666, -0.031566482, 0.004014765, 0.029975075, -0.019064683, -0.020792922, 0.029674089, 0.0061760307, -0.03304885, 0.010277189, 0.028192636, -0.024429647, -0.016198313, 0.03266448, 1.7600101E-8, -0.03282673, 0.016359702, 0.024795612, -0.0287573, -0.010535236, 0.034048203, -0.006394616, -0.030878782, 0.021746015, 0.020039428, -0.031667702, -0.0042631323, 0.03369082, -0.012476109, -0.027355507, 0.025984699, 0.0143165095, -0.032918967, 0.002096681, 0.031629987, -0.01774357, -0.022562675, 0.028738722, 0.008112245, -0.032434706, 0.008017384, 0.028071003, -0.021780431, -0.01692763, 0.0298216, 0.0019536256, -0.03031029, 0.013025834, 0.023362232, -0.024301626, -0.010950739, 0.029216051, -0.0036521815, -0.026800204};

float inputs[BUFFER_SIZE] = {};

void setup() {
  Serial.begin(115200);
}

void loop() {
  if (isUpdating(updatingFrequency)) {
    unsigned long startTime1 = isMicrosecond ? micros() : millis();
    unsigned long elapsedTime1 = dataAcquisition() - startTime1;
    unsigned long startTime2 = isMicrosecond ? micros() : millis();
    unsigned long elapsedTime2 = signalProcessing(7, 8) - startTime2;

    if (elapsedTime1 + elapsedTime2 > (isMicrosecond ? MICROSECONDS : MILLISECONDS) / updatingFrequency) {
      Serial.println(F("warning : set the buffer size smaller or sampling frequency bigger."));
    }
  }
}

bool isUpdating(float frequency) {
  unsigned long currentTimestamp = isMicrosecond ? micros() : millis();
  static unsigned long updatingTimestamp;
  if (currentTimestamp - updatingTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / frequency) {
    updatingTimestamp = currentTimestamp;
    return true;
  } else {
    return false;
  }
}

bool isSampling(float frequency) {
  unsigned long currentTimestamp = isMicrosecond ? micros() : millis();
  static unsigned long samplingTimestamp;
  if (currentTimestamp - samplingTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / frequency) {
    samplingTimestamp = currentTimestamp;
    return true;
  } else {
    return false;
  }
}

unsigned long dataAcquisition() {
  unsigned int samplingIndex = 0;
  while (samplingIndex < BUFFER_SIZE) {
    if (isSampling(samplingFrequency)) {
      inputs[samplingIndex++] = (analogRead(VOLUME) - (1024 / 2 - 1)) / 256.0;
    }
  }
  return isMicrosecond ? micros() : millis();
}

unsigned long signalProcessing(uint8_t frequency1, uint8_t frequency2) {
  float sincSignal1[BUFFER_SIZE] = {};
  switch (frequency1) {
    case 1 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_01[i]);
      }
      break;
    }
    case 2 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_02[i]);
      }
      break;
    }
    case 3 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_03[i]);
      }
      break;
    }
    case 4 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_04[i]);
      }
      break;
    }
    case 5 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_05[i]);
      }
      break;
    }
    case 6 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_06[i]);
      }
      break;
    }
    case 7 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_07[i]);
      }
      break;
    }
    case 8 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_08[i]);
      }
      break;
    }
    case 9 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_09[i]);
      }
      break;
    }
    case 10 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_10[i]);
      }
      break;
    }
    case 11 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_11[i]);
      }
      break;
    }
    case 12 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_12[i]);
      }
      break;
    }
    case 13 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_13[i]);
      }
      break;
    }
    case 14 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_14[i]);
      }
      break;
    }
    case 15 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_15[i]);
      }
      break;
    }
    case 16 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_16[i]);
      }
      break;
    }
    case 17 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_17[i]);
      }
      break;
    }
    case 18 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_18[i]);
      }
      break;
    }
    case 19 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_19[i]);
      }
      break;
    }
    case 20 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_20[i]);
      }
      break;
    }
    case 21 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_21[i]);
      }
      break;
    }
    case 22 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_22[i]);
      }
      break;
    }
    case 23 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_23[i]);
      }
      break;
    }
    case 24 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_24[i]);
      }
      break;
    }
    case 25 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_25[i]);
      }
      break;
    }
    case 26 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_26[i]);
      }
      break;
    }
    case 27 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_27[i]);
      }
      break;
    }
    case 28 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_28[i]);
      }
      break;
    }
    case 29 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_29[i]);
      }
      break;
    }
  }
  float sincSignal2[BUFFER_SIZE] = {};
  switch (frequency2) {
    case 1 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_01[i]);
      }
      break;
    }
    case 2 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_02[i]);
      }
      break;
    }
    case 3 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_03[i]);
      }
      break;
    }
    case 4 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_04[i]);
      }
      break;
    }
    case 5 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_05[i]);
      }
      break;
    }
    case 6 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_06[i]);
      }
      break;
    }
    case 7 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_07[i]);
      }
      break;
    }
    case 8 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_08[i]);
      }
      break;
    }
    case 9 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_09[i]);
      }
      break;
    }
    case 10 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_10[i]);
      }
      break;
    }
    case 11 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_11[i]);
      }
      break;
    }
    case 12 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_12[i]);
      }
      break;
    }
    case 13 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_13[i]);
      }
      break;
    }
    case 14 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_14[i]);
      }
      break;
    }
    case 15 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_15[i]);
      }
      break;
    }
    case 16 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_16[i]);
      }
      break;
    }
    case 17 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_17[i]);
      }
      break;
    }
    case 18 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_18[i]);
      }
      break;
    }
    case 19 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_19[i]);
      }
      break;
    }
    case 20 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_20[i]);
      }
      break;
    }
    case 21 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_21[i]);
      }
      break;
    }
    case 22 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_22[i]);
      }
      break;
    }
    case 23 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_23[i]);
      }
      break;
    }
    case 24 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_24[i]);
      }
      break;
    }
    case 25 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_25[i]);
      }
      break;
    }
    case 26 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_26[i]);
      }
      break;
    }
    case 27 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_27[i]);
      }
      break;
    }
    case 28 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_28[i]);
      }
      break;
    }
    case 29 : {
      for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_29[i]);
      }
      break;
    }
  }
  const bool isSame = true;
  float result1[BUFFER_SIZE] = {};
  float result2[BUFFER_SIZE] = {};
  convolution(inputs, BUFFER_SIZE, sincSignal1, BUFFER_SIZE, result1, isSame);
  convolution(inputs, BUFFER_SIZE, sincSignal2, BUFFER_SIZE, result2, isSame);

  for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
    Serial.print(inputs[i]);
    Serial.print("\t");
    Serial.print(sincSignal1[i]);
    Serial.print("\t");
    Serial.print(sincSignal2[i]);
    Serial.print("\t");
    Serial.print(result1[i]);
    Serial.print("\t");
    Serial.print(result2[i]);
    Serial.print("\n");
  }

  // power comparison
  float power1 = 0;
  float power2 = 0;
  for (unsigned int i = 0; i < BUFFER_SIZE; i++) {
    power1 = power1 + pow(result1[i], 2);
    power2 = power2 + pow(result2[i], 2);
  }
  Serial.print(power1);
  Serial.print("\t");
  Serial.print(power2);
  Serial.print("\n");

  return isMicrosecond ? micros() : millis();
}

void convolution(float u[], unsigned int uLength, float v[], unsigned int vLength, float w[], bool isSame) {
  float tmpArr[uLength + vLength - 1] = {};
  for (unsigned int i = 0; i < uLength + vLength - 1; i++) {
    unsigned int index = i;
    float tmpVal = 0;
    for (unsigned int j = 0; j < vLength; j++) {
      if (index >= 0 && index < uLength) {
        tmpVal += u[index] * v[j];
      }
      index--;
      tmpArr[i] = tmpVal;
    }
  }
  if (isSame) {
    unsigned int start = ceil((vLength - 1) / 2.0);
    for (unsigned int i = 0; i < uLength; i++) {
      w[i] = tmpArr[start+i]; 
    }
  } else {
    for (unsigned int i = 0; i < uLength + vLength - 1; i++) {
      w[i] = tmpArr[i]; 
    }
  }
}

