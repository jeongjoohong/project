#include "TimerOne.h"

#define VOLUME_L      A0
#define VOLUME_R      A1
#define VOLUME_T      A2
#define ANALOG_INPUT  A3

#define LED_R         12
#define LED_L         11
#define POT_SELECT    10
#define POT_CLOCK     9
#define POT_MOSI      8
#define REG_DATA      7
#define REG_LATCH     6
#define REG_CLOCK     5

#define MILLISECONDS  1000
#define MICROSECONDS  1000000

const bool isMicrosecond                = true;
const float ledDutyCycle                = 0.5;
const float inputResolution             = 1024;
const uint8_t maxBlinkFrequency         = 30;
const uint8_t minDigipotLevel           = 115;
const uint8_t maxDigipotLevel           = 255;

const uint8_t bufferSize                = 60;
const float samplingFrequency           = 180;
const float updatingFrequency           = 1;
const float bandwidth                   = 1;
const PROGMEM float sinc_01[bufferSize] = {0.041081637, 0.04118201, 0.041227885, 0.041218895, 0.041154787, 0.0410354, 0.040860668, 0.040630605, 0.040345337, 0.040005084, 0.039610147, 0.03916094, 0.038657967, 0.03810181, 0.037493154, 0.036832783, 0.03612157, 0.035360456, 0.0345505, 0.033692814, 0.032788623, 0.031839214, 0.030845968, 0.029810322, 0.028733807, 0.027618013, 0.026464606, 0.025275312, 0.02405192, 0.022796277, 0.021510294, 0.020195914, 0.01885515, 0.017490055, 0.016102703, 0.014695235, 0.013269807, 0.0118286, 0.010373839, 0.008907745, 0.0074325744, 0.0059505957, 0.0044640703, 0.002975279, 0.0014865013, -1.859082E-9, -0.0014819627, -0.0029571268, -0.0044232765, -0.00587818, -0.007319665, -0.008745564, -0.010153763, -0.011542164, -0.0129087325, -0.0142514445, -0.015568372, -0.016857585, -0.018117255, -0.019345568};
const PROGMEM float sinc_02[bufferSize] = {0.029635565, 0.029653674, 0.029523546, 0.029245019, 0.028818725, 0.028246103, 0.027529396, 0.026671631, 0.02567661, 0.024548898, 0.023293788, 0.021917291, 0.020426089, 0.01882751, 0.01712948, 0.015340496, 0.013469563, 0.011526155, 0.009520165, 0.007461838, 0.005361728, 0.0032306418, 0.0010795654, -0.0010803915, -0.0032380463, -0.005382214, -0.0075017796, -0.0095857475, -0.011623293, -0.013603853, -0.015517148, -0.01735328, -0.019102743, -0.02075651, -0.022306073, -0.023743488, -0.025061408, -0.02625315, -0.027312705, -0.028234793, -0.029014867, -0.029649151, -0.030134678, -0.030469261, -0.030651549, -0.030680994, -0.03055789, -0.030283332, -0.029859237, -0.029288314, -0.028574059, -0.02772072, -0.02673327, -0.025617406, -0.024379458, -0.023026437, -0.021565875, -0.02000591, -0.018355131, -0.016622614};
const PROGMEM float sinc_03[bufferSize] = {0.032957565, 0.032877132, 0.032431126, 0.031622462, 0.030458262, 0.028949779, 0.027112281, 0.024964908, 0.022530455, 0.019835122, 0.016908225, 0.013781863, 0.010490558, 0.0070708496, 0.0035608923, -1.4914404E-9, -0.0035718095, -0.007114265, -0.01058733, -0.013951659, -0.017169066, -0.020202957, -0.023018798, -0.025584463, -0.027870666, -0.029851284, -0.031503662, -0.032808896, -0.03375203, -0.034322273, -0.034513082, -0.03432227, -0.033752028, -0.032808896, -0.03150366, -0.02985128, -0.027870663, -0.02558446, -0.02301879, -0.020202953, -0.01716906, -0.013951657, -0.010587332, -0.007114255, -0.0035718034, 4.0687906E-10, 0.0035609065, 0.0070708436, 0.010490563, 0.013781865, 0.01690824, 0.019835116, 0.02253046, 0.024964912, 0.02711229, 0.028949777, 0.030458266, 0.031622462, 0.032431126, 0.03287713};
const PROGMEM float sinc_04[bufferSize] = {0.034079045, 0.03385047, 0.03295578, 0.031408835, 0.029236661, 0.026478957, 0.023187375, 0.019424526, 0.015262767, 0.010782783, 0.006071981, 0.0012227739, -0.003669305, -0.00850747, -0.013195697, -0.017640613, -0.02175344, -0.02545174, -0.028661178, -0.03131697, -0.03336528, -0.034764264, -0.035485, -0.035512064, -0.034843866, -0.03349272, -0.031484593, -0.02885859, -0.025666215, -0.021970287, -0.017843744, -0.013368083, -0.008631818, -0.00372865, 0.0012444743, 0.006189221, 0.011007901, 0.015605488, 0.019891413, 0.023781521, 0.02719963, 0.030079132, 0.032364327, 0.034011442, 0.03498957, 0.035281222, 0.034882654, 0.033803895, 0.032068495, 0.02971306, 0.026786389, 0.023348518, 0.019469412, 0.015227576, 0.01070834, 0.006002296, 0.00120315, -0.0035938271, -0.00829405, -0.012805231};
const PROGMEM float sinc_05[bufferSize] = {0.03125082, 0.030870048, 0.02954267, 0.027304003, 0.024217831, 0.020374566, 0.015888562, 0.010894678, 0.005544156, -1.3986761E-9, -0.0055680727, -0.010988864, -0.016095065, -0.020728445, -0.02474485, -0.028018719, -0.03044708, -0.03195279, -0.032487053, -0.03203098, -0.030596284, -0.028224949, -0.024988022, -0.02098342, -0.016332984, -0.011178658, -0.00567814, 1.5987814E-8, 0.005681633, 0.011192321, 0.016362902, 0.021034667, 0.025064318, 0.028328415, 0.030727202, 0.03218771, 0.032666, 0.032148488, 0.030652346, 0.028224945, 0.02494231, 0.020906726, 0.016243514, 0.011097075, 0.005626381, -1.09278275E-8, -0.005609241, -0.011029379, -0.01609509, -0.020652307, -0.024563413, -0.027711062, -0.030002078, -0.031369984, -0.031777132, -0.031215647, -0.029707558, -0.027304003, -0.024083387, -0.020148998};
const PROGMEM float sinc_06[bufferSize] = {0.03284635, 0.03222671, 0.03018699, 0.026808903, 0.022234015, 0.01665776, 0.010321023, 0.0034996367, -0.0035077275, -0.010392754, -0.016851174, -0.022596316, -0.027371963, -0.030963851, -0.033209387, -0.034005046, -0.033311173, -0.031153956, -0.027624454, -0.022874698, -0.017111124, -0.010585488, -0.0035837505, 0.003586501, 0.010609728, 0.017176501, 0.022997143, 0.027814746, 0.031416498, 0.033643264, 0.03439662, 0.03364326, 0.03141649, 0.027814737, 0.022997132, 0.01717649, 0.010609717, 0.003586489, -0.0035837623, -0.010585499, -0.017111134, -0.022874702, -0.027624452, -0.031153964, -0.033311173, -0.034005046, -0.033209383, -0.030963857, -0.027371956, -0.022596313, -0.01685115, -0.010392766, -0.003507716, 0.0034996404, 0.01032105, 0.016657751, 0.022234024, 0.026808906, 0.030187003, 0.03222671};
const PROGMEM float sinc_07[bufferSize] = {0.033332158, 0.032440834, 0.029607441, 0.02499028, 0.018855797, 0.0115631055, 0.0035428326, -0.0047284714, -0.012756836, -0.020060573, -0.026199345, -0.030800888, -0.033583734, -0.034374505, -0.03311878, -0.02988479, -0.024859697, -0.018338712, -0.010707651, -0.0024199302, 0.0060305414, 0.014138991, 0.02142014, 0.027437434, 0.03182939, 0.034331452, 0.034792047, 0.03318179, 0.029595396, 0.024246044, 0.017452665, 0.009620714, 0.0012179133, -0.007253952, -0.015289092, -0.022408267, -0.028187456, -0.032283235, -0.03445346, -0.03457156, -0.032634024, -0.0287604, -0.023185836, -0.016246814, -0.008360555, 2.2899762E-8, 0.008335085, 0.016147714, 0.022973971, 0.028410407, 0.032138266, 0.03394212, 0.033722527, 0.03150145, 0.027420405, 0.021731507, 0.014781681, 0.006991592, -0.001170326, -0.009215662};
const PROGMEM float sinc_08[bufferSize] = {0.031691905, 0.030557266, 0.027037801, 0.021394074, 0.014054329, 0.0055818465, -0.003368503, -0.012101114, -0.019933999, -0.026252288, -0.03055675, -0.032503396, -0.0319311, -0.028874928, -0.023564145, -0.016404934, -0.0079491595, 0.0011483309, 0.010180752, 0.018444523, 0.025294373, 0.030193938, 0.032758024, 0.03278301, 0.03026307, 0.025390975, 0.018543236, 0.010250852, 0.0011579808, -0.008028449, -0.01659385, -0.023872025, -0.029297052, -0.032447625, -0.033079956, -0.031146646, -0.026800351, -0.020381575, -0.012391971, -0.0034547995, 0.005733788, 0.014459316, 0.022044912, 0.027903903, 0.031585548, 0.032809876, 0.03148903, 0.027733618, 0.021843376, 0.014283324, 0.0056466255, -0.0033919206, -0.012129099, -0.019888032, -0.026071122, -0.03020603, -0.031982254, -0.031274255, -0.028150456, -0.022866879};
const PROGMEM float sinc_09[bufferSize] = {0.032826047, 0.031314783, 0.026716452, 0.019465769, 0.010261736, -1.4553676E-9, -0.010314645, -0.019667033, -0.027131902, -0.031965833, -0.03368151, -0.032097004, -0.02735504, -0.019910162, -0.0104850335, 4.052554E-10, 0.0105171865, 0.020032419, 0.027607378, 0.03249244, 0.0342011, 0.032558635, 0.027719975, 0.020155085, 0.010603159, -1.1596103E-8, -0.010613958, -0.020196114, -0.027804617, -0.032691248, -0.03437536, -0.032691248, -0.027804596, -0.020196088, -0.010613926, 2.2782805E-8, 0.010603161, 0.0201551, 0.027719976, 0.032558635, 0.0342011, 0.032492436, 0.027607385, 0.020032417, 0.010517186, -1.2157663E-9, -0.01048508, -0.019910177, -0.02735505, -0.032096997, -0.03368151, -0.031965826, -0.027131882, -0.019667052, -0.010314607, -1.9712541E-8, 0.0102617815, 0.01946576, 0.026716447, 0.031314783};
const PROGMEM float sinc_10[bufferSize] = {0.03304057, 0.03114281, 0.025462674, 0.01666678, 0.005804134, -0.005819391, -0.01679852, -0.025799008, -0.031720303, -0.033830516, -0.0318571, -0.026022019, -0.017016811, -0.005920442, 0.0059304577, 0.017103069, 0.026242185, 0.03223512, 0.034347605, 0.032313995, 0.02637077, 0.017228933, 0.005988712, -0.005993335, -0.017268434, -0.026471535, -0.032486975, -0.034584194, -0.032506753, -0.026503775, -0.017299978, -0.0060078986, 0.0060070287, 0.017292114, 0.026483623, 0.03247212, 0.034536798, 0.03243254, 0.026419077, 0.017228913, 0.0059777354, -0.005971418, -0.017173829, -0.026278326, -0.032190807, -0.03420611, -0.032092407, -0.026117941, -0.01701676, -0.0058987, 0.0058870297, 0.016915265, 0.025858672, 0.031647164, 0.033597026, 0.031491462, 0.02560476, 0.016666787, 0.005771864, -0.0057549486};
const PROGMEM float sinc_11[bufferSize] = {0.0319015, 0.0296689, 0.023085944, 0.013090569, 0.001126286, -0.011066811, -0.02170578, -0.029226229, -0.032512914, -0.03106551, -0.025074825, -0.015397835, -0.0034348227, 0.009073777, 0.020301249, 0.028602114, 0.032753848, 0.032137424, 0.026829809, 0.017594535, 0.0057716602, -0.006917249, -0.018620435, -0.027626982, -0.032617465, -0.032857895, -0.028307853, -0.019627238, -0.00808025, 0.0046491716, 0.01670363, 0.0263239, 0.032106526, 0.03320898, 0.029472804, 0.021446442, 0.0103044985, -0.0023246254, -0.01459724, -0.024724422, -0.03123336, -0.0331821, -0.030296315, -0.023007926, -0.012390341, 4.343991E-8, 0.012352618, 0.02286759, 0.030019458, 0.03277827, 0.030758813, 0.024274206, 0.014287431, 0.0022682468, -0.010024216, -0.020798806, -0.028494854, -0.032008093, -0.030849991, -0.02521548};
const PROGMEM float sinc_12[bufferSize] = {0.03281897, 0.030073192, 0.022092167, 0.010231553, -0.0034704, -0.016643876, -0.026998268, -0.032721315, -0.032796938, -0.027185896, -0.01683712, -0.0035269437, 0.010446447, 0.022660714, 0.030990206, 0.033976696, 0.031085184, 0.02279983, 0.010542799, -0.0035704076, -0.01709687, -0.027690047, -0.033507798, -0.03353335, -0.027753454, -0.017162146, -0.0035895004, 0.010615453, 0.022991981, 0.031395096, 0.034367945, 0.031395074, 0.022991963, 0.01061543, -0.0035895244, -0.017162167, -0.027753469, -0.033533353, -0.033507794, -0.027690032, -0.01709685, -0.0035704002, 0.01054279, 0.022799863, 0.031085195, 0.033976696, 0.030990181, 0.022660732, 0.010446425, -0.003526951, -0.016837167, -0.027185882, -0.03279694, -0.032721315, -0.026998233, -0.016643897, -0.003470377, 0.01023156, 0.022092208, 0.030073185};
const PROGMEM float sinc_13[bufferSize] = {0.032882486, 0.029644854, 0.02036616, 0.0068972744, -0.008047479, -0.021438366, -0.030545566, -0.033496656, -0.029662209, -0.019789932, -0.0058587873, 0.009318432, 0.022664024, 0.03146069, 0.03390586, 0.02948162, 0.019064458, 0.0047513316, -0.010563226, -0.02377353, -0.032193784, -0.034105167, -0.029107273, -0.018202096, -0.003592763, 0.0117623545, 0.024749981, 0.032734167, 0.03409242, 0.028545996, 0.017217197, 0.00240189, -0.012896779, -0.025578124, -0.03307365, -0.033868294, -0.027807157, -0.016125806, -0.0011977924, 0.013948258, 0.026244612, 0.033206746, 0.033436276, 0.026902502, 0.014945272, -2.3402736E-8, -0.014899705, -0.026738368, -0.033130683, -0.032802604, -0.025845869, -0.01369426, 0.0011724918, 0.015735345, 0.027050564, 0.03284548, 0.03197614, 0.02465314, 0.012391984, -0.0023008035};
const PROGMEM float sinc_14[bufferSize] = {0.032026157, 0.028363787, 0.018016439, 0.003377326, -0.012136691, -0.024883898, -0.031853896, -0.031379633, -0.02353655, -0.010133227, 0.005706228, 0.020271536, 0.03013674, 0.03296729, 0.028073363, 0.016577944, 0.0011588194, -0.014576165, -0.026934668, -0.033007685, -0.031355377, -0.022348914, -0.008087135, 0.008093377, 0.02240015, 0.03147517, 0.03318435, 0.027120152, 0.014698931, -0.0011704484, -0.016768882, -0.028440166, -0.033449225, -0.0306242, -0.020631075, -0.0058163605, 0.010344838, 0.024065055, 0.03213389, 0.03267009, 0.025561105, 0.012486382, -0.003480139, -0.018593585, -0.029318294, -0.033155914, -0.029228637, -0.018480051, -0.0034481802, 0.012334502, 0.02517287, 0.032075282, 0.03145213, 0.023482239, 0.010063205, -0.0056407927, -0.019946583, -0.029516807, -0.03214016, -0.027242666};
const PROGMEM float sinc_15[bufferSize] = {0.032815695, 0.02850603, 0.016506467, -1.4471399E-9, -0.016598605, -0.028825162, -0.033368364, -0.028967675, -0.016763145, 4.0067916E-10, 0.016835442, 0.029218087, 0.03380203, 0.029325796, 0.016959796, -1.1475036E-8, -0.017011797, -0.029505854, -0.034113836, -0.029578062, -0.017095165, -9.927061E-9, 0.017126473, 0.029686572, 0.034301743, 0.02972278, 0.01716827, -3.3986403E-8, -0.017178796, -0.029759048, -0.034364518, -0.029759038, -0.017178755, 4.5178666E-8, 0.017168311, 0.029722804, 0.034301743, 0.02968655, 0.017126488, -2.3527111E-8, -0.017095147, -0.029578067, -0.034113836, -0.029505849, -0.017011814, 2.0256383E-9, 0.016959837, 0.029325802, 0.03380203, 0.029218094, 0.01683543, 1.909196E-8, -0.016763212, -0.028967666, -0.033368364, -0.028825179, -0.016598552, -3.9596987E-8, 0.016506514, 0.028506035};
const PROGMEM float sinc_16[bufferSize] = {0.0327815, 0.027885202, 0.014456836, -0.0034569919, -0.020416947, -0.031244542, -0.03260517, -0.024036113, -0.008102279, 0.010372238, 0.025766524, 0.03337499, 0.030847501, 0.01891594, 0.001182526, -0.016968958, -0.030009748, -0.033952013, -0.027569909, -0.012780908, 0.0059309206, 0.022876054, 0.032891754, 0.032916836, 0.022928394, 0.005953519, -0.012849338, -0.027759846, -0.034238134, -0.030308884, -0.01716434, 0.001198032, 0.019192522, 0.031346515, 0.03396701, 0.02626391, 0.010588758, -0.008284261, -0.024613848, -0.033440635, -0.032094896, -0.02100527, -0.0035621289, 0.014919967, 0.028823568, 0.033937905, 0.02873547, 0.01482888, -0.0035296814, -0.020749668, -0.031607337, -0.03283177, -0.024091635, -0.008083605, 0.010300733, 0.025470775, 0.032839883, 0.030212948, 0.018441267, 0.0011475431};
const PROGMEM float sinc_17[bufferSize] = {0.032110333, 0.026701981, 0.012101039, -0.006735321, -0.02336678, -0.032074198, -0.02982828, -0.017344259, 0.0011449105, 0.019325234, 0.03096019, 0.032032326, 0.022131788, 0.0046114316, -0.014549789, -0.028789353, -0.033211157, -0.026270755, -0.010315146, 0.009211742, 0.025628338, 0.033304308, 0.029593494, 0.01574709, -0.0035084842, -0.02158691, -0.032297015, -0.031965476, -0.02069791, -0.002345445, 0.016812993, 0.0302212, 0.03329185, 0.024977433, 0.008128158, -0.01148615, -0.027154222, -0.033521842, -0.028423747, -0.01362068, 0.005809503, 0.023215292, 0.032651138, 0.030910535, 0.01861677, -4.451712E-8, -0.018560011, -0.030721948, -0.032352667, -0.022932693, -0.0057210946, 0.013372769, 0.027820824, 0.03271008, 0.026415281, 0.011139247, -0.007858583, -0.02407426, -0.031988975, -0.0289487};
const PROGMEM float sinc_18[bufferSize] = {0.032813944, 0.026628122, 0.010201013, -0.010229988, -0.02685567, -0.033282652, -0.026994132, -0.010335743, 0.010359647, 0.027181733, 0.033669088, 0.027293272, 0.010444837, -0.010463551, -0.027440097, -0.033971492, -0.02752418, -0.010527761, 0.010541187, 0.02762953, 0.03418849, 0.02768582, 0.010584188, -0.010592293, -0.02774922, -0.034319084, -0.027777396, -0.010613763, 0.010616544, 0.027798578, 0.03436268, 0.027798576, 0.010616478, -0.010613829, -0.027777435, -0.034319084, -0.027749218, -0.0105922595, 0.0105841905, 0.027685821, 0.03418849, 0.027629508, 0.010541215, -0.010527764, -0.027524183, -0.033971492, -0.02744004, -0.010463517, 0.01044487, 0.02729326, 0.033669088, 0.027181704, 0.0103595825, -0.0103357015, -0.026994178, -0.033282652, -0.02685561, -0.010230008, 0.010201001, 0.026628118};
const PROGMEM float sinc_19[bufferSize] = {0.032710087, 0.025854629, 0.007960846, -0.013422377, -0.029217064, -0.032673273, -0.02225593, -0.0023257611, 0.018687347, 0.031852912, 0.031538457, 0.017820952, -0.0035219265, -0.0234472, -0.033481423, -0.029327046, -0.0127044115, 0.00936086, 0.027509857, 0.034023147, 0.026107008, 0.007092532, -0.0149672, -0.030710714, -0.03344418, -0.021990024, -0.001194422, 0.020124797, 0.032920316, 0.03175805, 0.01712691, -0.0047670444, -0.024635252, -0.03405072, -0.02902538, -0.011700664, 0.010565715, 0.028327204, 0.03405956, 0.025351064, 0.005917965, -0.01598265, -0.031064253, -0.032951996, -0.02087958, 2.4087685E-8, 0.020815868, 0.032750927, 0.030780273, 0.015788097, -0.005828168, -0.02488953, -0.033337004, -0.027641207, -0.010278108, 0.011347349, 0.02806228, 0.03281937, 0.023671018, 0.004566219};
const PROGMEM float sinc_20[bufferSize] = {0.032172166, 0.024720583, 0.005620214, -0.01622874, -0.030583417, -0.030663772, -0.01635698, 0.0056944666, 0.025178993, 0.03294135, 0.025287567, 0.0057436656, -0.01656961, -0.031196361, -0.031248942, -0.016653515, 0.0057922923, 0.025587646, 0.033444848, 0.02565023, 0.005820623, -0.016776145, -0.031556062, -0.031580094, -0.016814467, 0.005842965, 0.025787592, 0.03367522, 0.025803227, 0.0058499607, -0.016845351, -0.031657226, -0.031652376, -0.016837578, 0.0058455947, 0.025775779, 0.03362907, 0.02574434, 0.0058312463, -0.016776184, -0.03149836, -0.031464674, -0.016722372, 0.0058003, 0.02555249, 0.033307076, 0.025474273, 0.0057648174, -0.016569713, -0.031081773, -0.031019753, -0.01647066, 0.0057077482, 0.025120934, 0.032713994, 0.02499734, 0.0056514703, -0.016228722, -0.030413693, -0.030324291};
const PROGMEM float sinc_21[bufferSize] = {0.03281287, 0.024459193, 0.0034504894, -0.019457962, -0.032468975, -0.028822677, -0.010310493, 0.013603776, 0.030625172, 0.031953, 0.016833981, -0.007013954, -0.027344076, -0.033674117, -0.022694677, 2.2543004E-8, 0.022764295, 0.03388087, 0.027596287, 0.0071003223, -0.017093714, -0.032545567, -0.031288948, -0.013941308, 0.010598957, 0.029720247, 0.03358336, 0.020187926, -0.0035911002, -0.025534358, -0.03436156, -0.025534254, -0.0035909442, 0.020188052, 0.033583395, 0.0297202, 0.01059887, -0.013941451, -0.031288985, -0.03254554, -0.017093636, 0.007100411, 0.027596321, 0.03388086, 0.02276425, -6.762902E-8, -0.022694793, -0.03367413, -0.027344003, -0.0070139295, 0.01683406, 0.03195304, 0.03062509, 0.013603666, -0.010310653, -0.028822724, -0.032468945, -0.019457908, 0.0034506037, 0.024459219};
const PROGMEM float sinc_22[bufferSize] = {0.03265587, 0.023562415, 0.0011465196, -0.02204482, -0.032955047, -0.025373163, -0.0034709363, 0.020492975, 0.033038326, 0.027050786, 0.005818384, -0.018774265, -0.03290235, -0.028577155, -0.008165896, 0.016903965, 0.032546286, 0.029935861, 0.010490384, -0.014899159, -0.03197193, -0.031112306, -0.012768843, 0.0127787255, 0.031183617, 0.032094013, 0.014978768, -0.010562761, -0.030188194, -0.03287072, -0.017098485, 0.008272702, 0.028994972, 0.033434555, 0.01910719, -0.005930814, -0.027615571, -0.03378015, -0.020985456, 0.0035599621, 0.026063815, 0.03390466, 0.02271533, -0.001183375, -0.02435539, -0.033807844, -0.024280757, -0.0011759767, 0.022507934, 0.03349205, 0.02566769, 0.003494971, -0.020540493, -0.032962155, -0.026863987, -0.005751595, 0.018473348, 0.032225545, 0.027860146, 0.007924212};
const PROGMEM float sinc_23[bufferSize] = {0.032220438, 0.02245056, -0.0011312346, -0.024156788, -0.032515623, -0.021006726, 0.0034246866, 0.025880046, 0.03259779, 0.019391488, -0.0057408386, -0.027462814, -0.032463614, -0.0176189, 0.008057055, 0.028888058, 0.032112308, 0.015704954, -0.010350538, -0.030140407, -0.03154559, -0.013667405, 0.012598607, 0.0312065, 0.03076776, 0.011525491, -0.014779141, -0.032075103, -0.029785622, -0.00929986, 0.016870607, 0.032737244, 0.028608328, 0.0070119565, -0.018852491, -0.03318639, -0.027247304, -0.004684203, 0.020705724, 0.033418503, 0.025716178, 0.00233928, -0.022412544, -0.033432025, -0.0240306, -1.8158202E-8, 0.02395715, 0.03322802, 0.02220762, -0.0023107748, -0.02532555, -0.032810055, -0.020266434, 0.004570673, 0.026505936, 0.032184176, 0.01822688, -0.0067583565, -0.027488705, -0.031358868};
const PROGMEM float sinc_24[bufferSize] = {0.032812215, 0.022022717, -0.003450427, -0.026781043, -0.03246832, -0.016640447, 0.010310302, 0.030553937, 0.030624544, 0.010381945, -0.016833665, -0.032997385, -0.027343508, -0.0035392116, 0.022694256, 0.033969704, 0.022763796, -0.0035609647, -0.027595755, -0.03340391, -0.01709333, 0.0105744675, 0.03128833, 0.031312168, 0.010598679, -0.017158682, -0.033582713, -0.027785797, -0.0035909375, 0.022990786, 0.03436087, 0.0229907, -0.003590985, -0.027785825, -0.033582702, -0.01715864, 0.010598725, 0.031312186, 0.03128831, 0.010574422, -0.017093373, -0.033403914, -0.027595764, -0.003560885, 0.022763832, 0.033969704, 0.022694174, -0.0035391622, -0.027343536, -0.03299738, -0.016833568, 0.010381898, 0.030624565, 0.030553931, 0.010310197, -0.016640402, -0.032468326, -0.026781036, -0.0034503185, 0.022022681};
const PROGMEM float sinc_25[bufferSize] = {0.032612473, 0.021026919, -0.0056971386, -0.028493688, -0.031001976, -0.011313443, 0.01658087, 0.03273683, 0.025523575, -1.1278753E-8, -0.025633663, -0.033019822, -0.016796324, 0.011509959, 0.031676628, 0.029239535, 0.00587151, -0.021764442, -0.03390257, -0.021817693, 0.0059003294, 0.029454784, 0.031987928, 0.011651509, -0.017044703, -0.033590198, -0.026140446, 6.714479E-8, 0.026156425, 0.033631142, 0.017075837, -0.011680017, -0.03208561, -0.029562714, -0.0059255073, 0.021924453, 0.034089316, 0.021897666, -0.0059111, -0.029454762, -0.03192941, -0.0116089005, 0.01695135, 0.033345025, 0.025902169, -2.482104E-8, -0.025823051, -0.03314154, -0.016796257, 0.011467665, 0.031444393, 0.028918453, 0.005785649, -0.02136743, -0.03316172, -0.0212623, 0.0057289884, 0.028493663, 0.03082986, 0.011188185};
const PROGMEM float sinc_26[bufferSize] = {0.032259945, 0.019921867, -0.007851298, -0.029732274, -0.028814984, -0.005681895, 0.021949677, 0.032802418, 0.018430157, -0.0102072265, -0.031104442, -0.028127005, -0.0034733946, 0.023946153, 0.033020657, 0.016698943, -0.012529629, -0.032195948, -0.027131258, -0.0011717133, 0.025747743, 0.03290858, 0.014761176, -0.014772534, -0.032983962, -0.025846062, 0.0011780957, 0.027318206, 0.032467254, 0.0126544675, -0.016891332, -0.03345207, -0.024296153, 0.0035296911, 0.028625958, 0.031704906, 0.010420248, -0.01884401, -0.033590857, -0.022512045, 0.005836551, 0.029645354, 0.030636732, 0.008102786, -0.02059233, -0.03339795, -0.020529237, 0.00805343, 0.030356793, 0.02928452, 0.005747791, -0.022102233, -0.032878216, -0.01838761, 0.01013691, 0.030747434, 0.027676009, 0.0034019619, -0.023345415, -0.03204356};
const PROGMEM float sinc_27[bufferSize] = {0.032811742, 0.019345162, -0.010200334, -0.03148255, -0.026853858, 1.6266206E-8, 0.02699233, 0.03180804, 0.010358925, -0.019747376, -0.03366683, -0.019828383, 0.010444167, 0.032201305, 0.02743821, -3.3610803E-8, -0.027522366, -0.032398984, -0.010540446, 0.020072723, 0.034186196, 0.020113558, -0.0105835, -0.03259746, -0.027747316, 6.750018E-8, 0.027775597, 0.0326637, 0.010615681, -0.02019554, -0.034360375, -0.02019543, 0.010615873, 0.032663744, 0.027775519, -6.831863E-8, -0.027747396, -0.032597397, -0.010583371, 0.02011367, 0.034186196, 0.020072669, -0.010540512, -0.032399006, -0.027522307, 6.843685E-8, 0.027438365, 0.03220126, 0.01044404, -0.019828489, -0.03366683, -0.019747347, 0.010359097, 0.031808063, 0.026992213, -6.7842876E-8, -0.026853986, -0.03148252, -0.010200229, 0.019345261};
const PROGMEM float sinc_28[bufferSize] = {0.032576226, 0.018272031, -0.012276622, -0.032146927, -0.023705801, 0.0057376176, 0.030261077, 0.028159339, 0.0011614948, -0.026984835, -0.031409383, -0.008102398, 0.02245295, 0.033288263, 0.014760825, -0.01686272, -0.033693023, -0.020822743, 0.010464874, 0.032591175, 0.026000133, -0.003551279, -0.030022912, -0.030045737, -0.003559257, 0.026099548, 0.03276558, 0.010536809, -0.02099834, -0.034028906, -0.01705682, 0.014953782, 0.0337749, 0.022816014, -0.008246242, -0.03201577, -0.027548125, 0.0011876326, 0.028836245, 0.031036435, 0.0058936393, -0.024388947, -0.033124838, -0.012669797, 0.018887028, 0.03372539, 0.018829063, -0.01259265, -0.03282213, -0.02409201, 0.005804402, 0.030471426, 0.02822433, 0.001158697, -0.026798697, -0.03104884, -0.007972312, 0.021991076, 0.03245306, 0.014324052};
const PROGMEM float sinc_29[bufferSize] = {0.032293558, 0.017165247, -0.014241652, -0.032401454, -0.020113042, 0.011202811, 0.03211986, 0.022865906, -0.007981691, -0.031447295, -0.025382992, 0.004620727, 0.030388365, 0.027626606, -0.0011649687, -0.028953606, -0.02956305, -0.002338824, 0.02715954, 0.031162994, 0.005842627, -0.025028247, -0.032402173, -0.009298206, 0.022587186, 0.0332617, 0.0126580065, -0.019868528, -0.033728503, -0.015875611, 0.016908856, 0.03379542, 0.018906808, -0.013748616, -0.03346142, -0.021710051, 0.010431151, 0.032731634, 0.024247486, -0.0070022093, -0.03161718, -0.026485343, 0.003509113, 0.030135047, 0.028394546, 1.7402048E-8, -0.02830783, -0.029951176, -0.0034769473, 0.026162991, 0.031136813, 0.006874753, -0.023733146, -0.03193901, -0.010147224, 0.021054383, 0.032351047, 0.013251471, -0.018166952, -0.03237246};

volatile uint8_t input1                 = 0;
volatile uint8_t input2                 = 0;
volatile uint8_t input3                 = 0;
float input4[bufferSize]                = {};
volatile unsigned long segmentIndex     = 0;
volatile uint8_t previousInput3         = 0;
volatile bool isLedLOn                  = false;
volatile bool isLedROn                  = false;

void setup() {
  pinMode(REG_DATA, OUTPUT);
  pinMode(REG_LATCH, OUTPUT);
  pinMode(REG_CLOCK, OUTPUT);
  pinMode(POT_SELECT, OUTPUT);
  pinMode(POT_CLOCK, OUTPUT);
  pinMode(POT_MOSI, OUTPUT);
  pinMode(LED_L, OUTPUT);
  pinMode(LED_R, OUTPUT);

  Serial.begin(115200);
  Serial.println(F("⊂_ヽ                \t ____  ____    ___    ____    ___     __ ______ "));
  Serial.println(F("  ＼＼  Λ＿Λ         \t|    \\|    \\  /   \\  |    |  /  _]   /  ]      T"));
  Serial.println(F("　　 ＼ ('ㅅ')  두둠칫 \t|  o  )  D  )Y     Y l__  | /  [_   /  /|      |"));
  Serial.println(F("　　　 >　⌒ヽ         \t|   _/|    / |  O  | __j  |Y    _] /  / l_j  l_j"));
  Serial.println(F("　　　/ 　 へ＼        \t|  |  |    \\ |     |/  |  ||   [_ /   \\_  |  |  "));
  Serial.println(F("　　 /　　/　＼＼      \t|  |  |  .  Yl     !\\  `  ||     T\\     | |  |  "));
  Serial.println(F("　　 ﾚ　ノ　　 ヽ_つ    \tl__j  l__j\\_j \\___/  \\____jl_____j \\____j l__j  "));
  Serial.println(F("　　/　/ 두둠칫        \t "));
  Serial.println(F("　 /　/|            \tArduino 1.8.2+, ATmega328P"));
  Serial.println(F("　(　(ヽ             \tSoftware Version 1.0.0"));
  Serial.println(F("　|　|、＼            \tCopyright (c) 2017 Jeongjoo Hong and Daehun Kang"));
  Serial.println(F("　| 丿 ＼ ⌒)         \thttps://github.com/jeongjoohong/project"));
  Serial.println(F("　| |　　) /         \t"));
  Serial.print(F("(`ノ )　　Lﾉ         \tStarting Serial Data Logger."));
  registerBlink(2, 500);

  Timer1.initialize(1000);
  Timer1.attachInterrupt(interfaceCallback);
}

void registerBlink(unsigned int times, unsigned int duration) {
  digitalWrite(REG_LATCH, LOW);
  shiftOut(REG_DATA, REG_CLOCK, MSBFIRST, B00000000);
  digitalWrite(REG_LATCH, HIGH);
  delay(200);
  for (unsigned int i = 0; i < times; i++) {
    digitalWrite(REG_LATCH, LOW);
    shiftOut(REG_DATA, REG_CLOCK, MSBFIRST, B11111111);
    digitalWrite(REG_LATCH, HIGH);
    Serial.print(F(" ."));
    delay(duration);
    digitalWrite(REG_LATCH, LOW);
    shiftOut(REG_DATA, REG_CLOCK, MSBFIRST, B00000000);
    digitalWrite(REG_LATCH, HIGH);
    Serial.print(F(" ."));
    delay(duration);
  }
  Serial.print(F("\n\n"));
}

void interfaceCallback() {
  int volumeL = analogRead(VOLUME_L);
  int volumeR = analogRead(VOLUME_R);
  int volumeT = analogRead(VOLUME_T);
  input1 = round(volumeL * (maxBlinkFrequency / inputResolution));
  input2 = round(volumeR * (maxBlinkFrequency / inputResolution));
  input3 = round(volumeT * ((maxDigipotLevel - minDigipotLevel) / inputResolution) + minDigipotLevel);
  displaySegment();
  ledBrightness();
  blinking();
}

void displaySegment() {
  uint8_t index = segmentIndex % 4;
  byte data;
  switch (index) {
    case 0 : {
      data = B01110000 + (input1 / 10);
      break;
    }
    case 1 : {
      data = B10110000 + (input1 % 10);
      break;
    }
    case 2 : {
      data = B11010000 + (input2 / 10);
      break;
    }
    case 3 : {
      data = B11100000 + (input2 % 10);
      break;
    }
  }
  digitalWrite(REG_LATCH, LOW);
  shiftOut(REG_DATA, REG_CLOCK, MSBFIRST, data);
  digitalWrite(REG_LATCH, HIGH);
  segmentIndex = segmentIndex + 1;
}

void ledBrightness() {
  if (input3 == minDigipotLevel) {
    input3 = 0;
  }
  if (input3 != previousInput3) {
    previousInput3 = input3;
    digitalWrite(POT_SELECT, LOW);
    shiftOut(POT_MOSI, POT_CLOCK, MSBFIRST, B00000000);
    shiftOut(POT_MOSI, POT_CLOCK, MSBFIRST, input3);
    digitalWrite(POT_SELECT, HIGH);
    digitalWrite(POT_SELECT, LOW);
    shiftOut(POT_MOSI, POT_CLOCK, MSBFIRST, B00010000);
    shiftOut(POT_MOSI, POT_CLOCK, MSBFIRST, input3);
    digitalWrite(POT_SELECT, HIGH);
  }
}

void blinking() {
  unsigned long currentTimestamp = isMicrosecond ? micros() : millis();
  static unsigned long blinkingLTimestamp;
  static unsigned long blinkingRTimestamp;
  if (input1 == 0) {
    if (isLedLOn) {
      isLedLOn = false;
      digitalWrite(LED_L, LOW);
    }
  } else if (input1 == maxBlinkFrequency) {
    if (!isLedLOn) {
      isLedLOn = true;
      digitalWrite(LED_L, HIGH);
    }
  } else {
    if (currentTimestamp - blinkingLTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / input1) {
      blinkingLTimestamp = currentTimestamp;
      isLedLOn = true;
      digitalWrite(LED_L, HIGH);
    } else {
      if (currentTimestamp - blinkingLTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / input1 * ledDutyCycle) {
        if (isLedLOn == true) {
          isLedLOn = false;
          digitalWrite(LED_L, LOW);
        }        
      }
    }
  }
  if (input2 == 0) {
    if (isLedROn) {
      isLedROn = false;
      digitalWrite(LED_R, isLedROn);
    }
  } else if (input2 == maxBlinkFrequency) {
    if (!isLedROn) {
      isLedROn = true;
      digitalWrite(LED_R, HIGH);
    }
  } else {
    if (currentTimestamp - blinkingRTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / input2) {
      blinkingRTimestamp = currentTimestamp;
      isLedROn = true;
      digitalWrite(LED_R, HIGH);
    } else {
      if (currentTimestamp - blinkingRTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / input2 * ledDutyCycle) {
        if (isLedROn == true) {
          isLedROn = false;
          digitalWrite(LED_R, LOW);
        }
      }
    }
  }
}

void loop() {
  if (isUpdating(updatingFrequency)) {
    noInterrupts();
    uint8_t frequency1 = input1;
    uint8_t frequency2 = input2;
    interrupts();
    unsigned long startTime1 = isMicrosecond ? micros() : millis();
    unsigned long elapsedTime1 = dataAcquisition() - startTime1;
    unsigned long startTime2 = isMicrosecond ? micros() : millis();
    unsigned long elapsedTime2 = signalProcessing(frequency1, frequency2) - startTime2;
    if (elapsedTime1 + elapsedTime2 > (isMicrosecond ? MICROSECONDS : MILLISECONDS) / updatingFrequency) {
      Serial.println(F("warning : set the buffer size smaller or sampling frequency bigger."));
    }
  }
}

bool isUpdating(float frequency) {
  unsigned long currentTimestamp = isMicrosecond ? micros() : millis();
  static unsigned long updatingTimestamp;
  if (currentTimestamp - updatingTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / frequency) {
    updatingTimestamp = currentTimestamp;
    return true;
  } else {
    return false;
  }
}

bool isSampling(float frequency) {
  unsigned long currentTimestamp = isMicrosecond ? micros() : millis();
  static unsigned long samplingTimestamp;
  if (currentTimestamp - samplingTimestamp >= (isMicrosecond ? MICROSECONDS : MILLISECONDS) / frequency) {
    samplingTimestamp = currentTimestamp;
    return true;
  } else {
    return false;
  }
}

unsigned long dataAcquisition() {
  unsigned int samplingIndex = 0;
  while (samplingIndex < bufferSize) {
    if (isSampling(samplingFrequency)) {
      input4[samplingIndex] = (analogRead(ANALOG_INPUT) - (inputResolution / 2 - 1)) / (inputResolution / 4);
      samplingIndex = samplingIndex + 1;
    }
  }
  return isMicrosecond ? micros() : millis();
}

unsigned long signalProcessing(uint8_t frequency1, uint8_t frequency2) {
  float sincSignal1[bufferSize] = {};
  switch (frequency1) {
    case 1 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_01[i]);
      }
      break;
    }
    case 2 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_02[i]);
      }
      break;
    }
    case 3 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_03[i]);
      }
      break;
    }
    case 4 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_04[i]);
      }
      break;
    }
    case 5 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_05[i]);
      }
      break;
    }
    case 6 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_06[i]);
      }
      break;
    }
    case 7 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_07[i]);
      }
      break;
    }
    case 8 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_08[i]);
      }
      break;
    }
    case 9 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_09[i]);
      }
      break;
    }
    case 10 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_10[i]);
      }
      break;
    }
    case 11 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_11[i]);
      }
      break;
    }
    case 12 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_12[i]);
      }
      break;
    }
    case 13 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_13[i]);
      }
      break;
    }
    case 14 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_14[i]);
      }
      break;
    }
    case 15 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_15[i]);
      }
      break;
    }
    case 16 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_16[i]);
      }
      break;
    }
    case 17 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_17[i]);
      }
      break;
    }
    case 18 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_18[i]);
      }
      break;
    }
    case 19 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_19[i]);
      }
      break;
    }
    case 20 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_20[i]);
      }
      break;
    }
    case 21 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_21[i]);
      }
      break;
    }
    case 22 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_22[i]);
      }
      break;
    }
    case 23 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_23[i]);
      }
      break;
    }
    case 24 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_24[i]);
      }
      break;
    }
    case 25 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_25[i]);
      }
      break;
    }
    case 26 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_26[i]);
      }
      break;
    }
    case 27 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_27[i]);
      }
      break;
    }
    case 28 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_28[i]);
      }
      break;
    }
    case 29 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal1[i] = pgm_read_float(&sinc_29[i]);
      }
      break;
    }
  }
  float sincSignal2[bufferSize] = {};
  switch (frequency2) {
    case 1 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_01[i]);
      }
      break;
    }
    case 2 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_02[i]);
      }
      break;
    }
    case 3 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_03[i]);
      }
      break;
    }
    case 4 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_04[i]);
      }
      break;
    }
    case 5 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_05[i]);
      }
      break;
    }
    case 6 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_06[i]);
      }
      break;
    }
    case 7 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_07[i]);
      }
      break;
    }
    case 8 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_08[i]);
      }
      break;
    }
    case 9 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_09[i]);
      }
      break;
    }
    case 10 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_10[i]);
      }
      break;
    }
    case 11 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_11[i]);
      }
      break;
    }
    case 12 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_12[i]);
      }
      break;
    }
    case 13 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_13[i]);
      }
      break;
    }
    case 14 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_14[i]);
      }
      break;
    }
    case 15 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_15[i]);
      }
      break;
    }
    case 16 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_16[i]);
      }
      break;
    }
    case 17 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_17[i]);
      }
      break;
    }
    case 18 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_18[i]);
      }
      break;
    }
    case 19 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_19[i]);
      }
      break;
    }
    case 20 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_20[i]);
      }
      break;
    }
    case 21 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_21[i]);
      }
      break;
    }
    case 22 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_22[i]);
      }
      break;
    }
    case 23 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_23[i]);
      }
      break;
    }
    case 24 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_24[i]);
      }
      break;
    }
    case 25 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_25[i]);
      }
      break;
    }
    case 26 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_26[i]);
      }
      break;
    }
    case 27 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_27[i]);
      }
      break;
    }
    case 28 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_28[i]);
      }
      break;
    }
    case 29 : {
      for (unsigned int i = 0; i < bufferSize; i++) {
        sincSignal2[i] = pgm_read_float(&sinc_29[i]);
      }
      break;
    }
  }
  const bool isSame = true;
  float result1[bufferSize] = {};
  float result2[bufferSize] = {};
  convolution(input4, bufferSize, sincSignal1, bufferSize, result1, isSame);
  convolution(input4, bufferSize, sincSignal2, bufferSize, result2, isSame);
  float power1 = 0;
  float power2 = 0;
  for (unsigned int i = 0; i < bufferSize; i++) {
    power1 = power1 + pow(result1[i], 2);
    power2 = power2 + pow(result2[i], 2);
  }
  Serial.print(power1);
  Serial.print("\t");
  Serial.print(power2);
  Serial.print("\n");
  return isMicrosecond ? micros() : millis();
}

void convolution(float u[], unsigned int uLength, float v[], unsigned int vLength, float w[], bool isSame) {
  float tmpArr[uLength + vLength - 1] = {};
  for (unsigned int i = 0; i < uLength + vLength - 1; i++) {
    unsigned int index = i;
    float tmpVal = 0;
    for (unsigned int j = 0; j < vLength; j++) {
      if (index >= 0 && index < uLength) {
        tmpVal += u[index] * v[j];
      }
      index--;
      tmpArr[i] = tmpVal;
    }
  }
  if (isSame) {
    unsigned int start = ceil((vLength - 1) / 2.0);
    for (unsigned int i = 0; i < uLength; i++) {
      w[i] = tmpArr[start+i]; 
    }
  } else {
    for (unsigned int i = 0; i < uLength + vLength - 1; i++) {
      w[i] = tmpArr[i]; 
    }
  }
}

